from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters import Text
from aiogram import Bot, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram import executor

from config import API_TOKEN, list_of_likes
from scripts import *
from keyboards import *
import urllib
import logging
import requests

from states_and_obj import *

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

flag = 0
flag_index = 0


# –ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(Text(equals=['–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è']))
async def registration(message: types.Message):
    await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=types.ReplyKeyboardRemove())
    await Form.name.set()


# /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_id = message.from_user.id
    if check_user_exists(user_id):
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb_start, resize_keyboard=True)
        await message.answer("–ß–µ–º –∑–∞–π–º–µ–º—Å—è —Å–µ–≥–æ–¥–Ω—è?", reply_markup=keyboard)
    else:
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb_registration, resize_keyboard=True)
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç!\n–Ø –±–æ—Ç –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ú–ê–ò!üòé‚úàÔ∏è\n–°–∏—Å—Ç–µ–º–∞ –≤–∑–∞–∏–º–Ω—ã—Ö –ª–∞–π–∫–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º: "
            f"\nE—Å–ª–∏ –≤—ã –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ç–æ –µ–≥–æ –∞–Ω–∫–µ—Ç—É –≤—ã —É–≤–∏–¥–∏—Ç–µ –æ–¥–Ω–æ–π –∏–∑ –ø–µ—Ä–≤—ã—Ö!"
            f"\n–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –∏ –Ω–∞—á–∏–Ω–∞–π –ø–æ–∏—Å–∫–∏ —Å–≤–æ–µ–π –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–∫–∏!", reply_markup=keyboard)
        await message.answer('–ë–æ—Ç–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∏: @lantafik –∏ @PhilippKroger')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(state=Form.name)
async def set_user_name(message: types.Message, state: FSMContext):
    name = message.text
    await state.update_data(name=name)
    await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?\n–ù–∞–ø–∏—à–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 18", reply_markup=types.ReplyKeyboardRemove())
    await Form.age.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(state=Form.age)
async def set_user_age(message: types.Message, state: FSMContext):
    x = message.text
    if not x.isdigit():
        await message.answer(f'–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ')
    else:
        if 16 <= int(x) <= 75:
            age = message.text
            await state.update_data(age=age)
            keyboard = types.ReplyKeyboardMarkup(keyboard=kb_sex, resize_keyboard=True)
            await message.answer("–ö–∞–∫–æ–≥–æ —Ç—ã –ø–æ–ª–∞?", reply_markup=keyboard)
            await Form.sex.set()
        else:
            await message.answer(
                f'–£–∫–∞–∑–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç. –¢—É—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (–æ—Ç 16 –¥–æ 75 –ª–µ—Ç)')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(state=Form.sex)
async def set_user_sex(message: types.Message, state: FSMContext):
    if message.text not in ['–Ø –¥–µ–≤—É—à–∫–∞', '–Ø –ø–∞—Ä–µ–Ω—å']:
        await message.answer('admin: –±—Ä–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É...')
    else:
        gender = message.text
        await state.update_data(sex=gender)
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb_skip_about, resize_keyboard=True)
        await message.answer("–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ.", reply_markup=keyboard)  # types.ReplyKeyboardRemove()
        await Form.personal_data.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–∏—Å–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(state=Form.personal_data)
async def set_user_personal_data(message: types.Message, state: FSMContext):
    personal_data = message.text
    user_id = message.from_user.id
    if personal_data == '–û—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è':
        await state.update_data(personal_data="")
        user_data = await state.get_data()
        if get_user_by_id(user_id) is None:
            add_data(user_id, user_id, user_data, 0, 0, 1, 0)
        else:
            # os.remove(f'images/{user_id}/{user_id}.jpg')
            update_data(user_id, user_data)

        await message.answer("–î–æ–±–∞–≤—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∫ –ø—Ä–æ—Ñ–∏–ª—é", reply_markup=types.ReplyKeyboardRemove())
        await Form.img.set()

    elif len(personal_data) <= 1000:
        await state.update_data(personal_data=personal_data)
        user_data = await state.get_data()
        if get_user_by_id(user_id) is None:
            add_data(user_id, user_id, user_data, 0, 0, 1, 0)
        else:
            # os.remove(f'images/{user_id}/{user_id}.jpg')
            update_data(user_id, user_data)

        await message.answer("–î–æ–±–∞–≤—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∫ –ø—Ä–æ—Ñ–∏–ª—é", reply_markup=types.ReplyKeyboardRemove())
        await Form.img.set()
    else:
        await message.answer("–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç, –∫—Ä–∞—Ç–∫–æ—Å—Ç—å —Å–µ—Å—Ç—Ä–∞ —Ç–∞–ª–∞–Ω—Ç–∞! \n –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ –µ—â—ë —Ä–∞–∑."
                             , reply_markup=types.ReplyKeyboardRemove())
        await Form.personal_data.set()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    @dp.message_handler(content_types=types.ContentType.TEXT, state=Form.img)
    async def handle_message(message: types.Message):
        await message.answer('–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—éüì∏')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(content_types=types.ContentType.PHOTO, state=Form.img)
async def set_user_photo(message: types.Message, state: FSMContext):
    photo = message.photo[-1]
    file_id = photo.file_id
    user_id = message.from_user.id
    file = await bot.get_file(file_id)
    file_path = file.file_path
    save_photo(message.from_user.id, file_id)
    # await bot.download_file(file_path, f"images/{user_id}/{user_id}.jpg")
    await state.update_data(img=photo)
    await state.finish()

    keyboard = types.ReplyKeyboardMarkup(keyboard=kb_profile, resize_keyboard=True)
    await message.delete()
    await message.answer("–î–∞–Ω–Ω—ã–µ –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! \n –í–æ—Ç –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞.",
                         reply_markup=keyboard)
    await send_profile(message.from_user.id, message.from_user.id, keyboard)
    msg = "1. –ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É‚úèÔ∏è\n2. –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æüì∏ \n3. –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ãüìú\n4. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ãüöÄ"
    await bot.send_message(message.from_user.id, msg)
    # file_test = await bot.get_file(file_id)
    # await bot.send_photo(message.from_user.id, file_test.file_id, reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ dislike
@dp.message_handler(Text(equals=['üëé']))
async def cmd_next(message: types.Message):
    global flag_index, list_of_likes
    await chk_profile(message)
    user_list_id = all_users_id(user_sex(message.from_user.id))
    profile = User(message.from_user.id)
    index = profile.index
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb_next, resize_keyboard=True)
    user_list_with_like = ankets_with_like(profile.user_id)
    if not user_list_with_like:  # —Å–ø–∏—Å–æ–∫ –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ª–∞–π–∫ —Ç–≤–æ–µ–π –∞–Ω–∫–µ—Ç–µ
        if index < len(user_list_id):
            flag_index = 1
            profile_id = user_list_id[index]
            change_index(profile.user_id, profile.index + 1)
            await send_profile(message.from_user.id, profile_id, keyboard)
            if len(user_list_id) == index + 1:
                change_index(profile.user_id, 0)
    else:
        flag_index = 2
        if profile.index_like == 0:
            profile = User(message.from_user.id)
            await send_profile(profile.user_id, user_list_with_like[profile.index_like], keyboard)
            change_index_like(1, profile.user_id)
            list_of_likes = index_spiska(profile.user_id)
        elif profile.index_like == len(user_list_with_like):
            profile = User(message.from_user.id)
            change_index_like(0, profile.user_id)
            delete_all_like(profile.user_id)
            delete_for_liked(list_of_likes)
            await cmd_next(message)
        else:
            profile = User(message.from_user.id)
            await send_profile(profile.user_id, user_list_with_like[profile.index_like], keyboard)
            change_index_like(profile.index_like + 1, profile.user_id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã"
@dp.message_handler(Text(equals=['–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã üöÄ', '4 üöÄ', 'üöÄ']))
async def cmd_next2(message: types.Message):
    global flag, flag_index
    flag_index = 1
    await chk_profile(message)
    profile = User(message.from_user.id)
    if profile.index_activity == 0:
        user_activity(1, message.from_user.id)
        msg = "–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞."
        await message.answer(msg)
    index = profile.index
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb_next, resize_keyboard=True)
    user_list = all_users_id(user_sex(message.from_user.id))
    if index < len(user_list):
        if flag == 1:
            if index > 0:
                profile_id = user_list[index - 1]
                await send_profile(message.from_user.id, profile_id, keyboard)
            else:
                profile_id = user_list[0]
                change_index(profile.user_id, profile.index + 1)
                await send_profile(message.from_user.id, profile_id, keyboard)
            flag = 0
        else:
            profile_id = user_list[index]
            change_index(profile.user_id, profile.index + 1)
            await send_profile(message.from_user.id, profile_id, keyboard)
            if len(user_list) == index + 1:
                change_index(profile.user_id, 0)


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def send_profile(user_id, profile_id, keyboard):
    if type(profile_id) == int:
        profile = User(profile_id)
        file_info = await bot.get_file(profile.photo)
        file_path = file_info.file_path
        url = f"https://api.telegram.org/file/bot{API_TOKEN}/{file_path}"
        response = requests.get(url)
        photo = response.content
        profile_text = f"{profile.name}, {profile.age}\n{profile.personal_data}"
        await bot.send_photo(user_id, photo, profile_text, reply_markup=keyboard)
    else:
        profile = User(profile_id[0])
        file_info = await bot.get_file(profile.photo)
        file_path = file_info.file_path
        url = f"https://api.telegram.org/file/bot{API_TOKEN}/{file_path}"
        response = requests.get(url)
        photo = response.content
        profile_text = f"{profile.name}, {profile.age}\n{profile.personal_data}"
        await bot.send_photo(user_id, photo, profile_text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∞–π–∫–∞
@dp.message_handler(Text(equals='‚ù§'))
async def user_like(message: types.Message):
    global flag_index
    await chk_profile(message)
    profile = User(message.from_user.id)
    user_list_with_like = ankets_with_like(profile.user_id)
    user_list_id = all_users_id(user_sex(profile.user_id))

    if flag_index == 2:
        profile_id = user_list_with_like[profile.index_like - 1]
        profile2 = User(profile_id[0])
    else:
        profile2 = User(user_list_id[profile.index - 1][0])
    if profile.index_like == len(user_list_with_like):
        profile = User(message.from_user.id)
        change_index_like(0, profile.user_id)

    if proverka_like2(profile.user_id, profile2.user_id):
        likes(profile.user_id, profile2.user_id)
    if proverka_like(profile.user_id, profile2.user_id):
        delete_like(profile.user_id, profile2.user_id)

        user = await bot.get_chat(profile.user_id)
        username = user.username
        user = await bot.get_chat(profile2.user_id)
        username2 = user.username
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb_f_reg, resize_keyboard=True)
        await send_profile(profile.chat_id, profile2.chat_id, keyboard)
        await send_profile(profile2.chat_id, profile.chat_id, keyboard)
        await bot.send_message(profile.chat_id, f'–£ –≤–∞—Å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è —Å @{username2}!', reply_markup=keyboard)
        await bot.send_message(profile2.chat_id, f'–£ –≤–∞—Å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è —Å @{username}!', reply_markup=keyboard)

        await bot.send_message(profile.chat_id, '–•–æ—Ä–æ—à–æ, –∏–¥—ë–º –¥–∞–ª—å—à–µ.', reply_markup=keyboard)
        await bot.send_message(profile2.chat_id, '–•–æ—Ä–æ—à–æ, –∏–¥—ë–º –¥–∞–ª—å—à–µ.', reply_markup=keyboard)
    await cmd_next(message)


# –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(Text(equals=['–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—åüèöÔ∏è', 'üèöÔ∏è']))
async def user_profile(message: types.Message):
    await chk_profile(message)
    profile = User(message.from_user.id)
    profile_text = f"{profile.name}, {profile.age}\n{profile.personal_data}"
    # photo = open(f'images/{profile.user_id}/{profile.user_id}.jpg', 'rb')
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb_profile, resize_keyboard=True)
    await bot.send_photo(profile.user_id, profile.photo, f'{profile_text}', reply_markup=keyboard)
    msg = "1. –ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É‚úèÔ∏è\n2. –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æüì∏ \n3. –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ãüìú\n4. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ãüöÄ"
    await bot.send_message(profile.user_id, msg)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(Text(equals='1‚úèÔ∏è'))
async def change_profile(message: types.Message):
    # delete_profile(message.from_user.id)
    await message.answer(f"–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=types.ReplyKeyboardRemove())
    await Form.name.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
@dp.message_handler(Text(equals='2üì∏'))
async def change_photo(message: types.Message):
    await message.answer("–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—éüì∏", reply_markup=types.ReplyKeyboardRemove())
    await Form1.image.set()

    @dp.message_handler(content_types=types.ContentType.TEXT, state=Form1.image)
    async def handle_message(message: types.Message):
        await message.answer('–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—éüì∏')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
@dp.message_handler(content_types=types.ContentType.PHOTO, state=Form1.image)
async def change_photo_1(message: types.Message, state: FSMContext):
    photo = message.photo[-1]
    profile = User(message.from_user.id)
    file_id, user_id = photo.file_id, message.from_user.id
    # os.remove(f'images/{user_id}/{user_id}.jpg')
    save_photo(message.from_user.id, file_id)
    file = await bot.get_file(file_id)
    file_path = file.file_path
    # await bot.download_file(file_path, f"images/{user_id}/{user_id}.jpg")
    await state.finish()
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb_main_page, resize_keyboard=True)
    await message.answer("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.",
                         reply_markup=keyboard)
    msg = "1. –ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É‚úèÔ∏è\n2. –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æüì∏ \n3. –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ãüìú\n4. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ãüöÄ"


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–∏—Å–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
@dp.message_handler(Text(equals='3üìú'))
async def change_personal_data(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb_skip_about, resize_keyboard=True)
    await message.answer("üìú –ò–∑–º–µ–Ω–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã üìú", reply_markup=keyboard)
    await Form2.text.set()


@dp.message_handler(state=Form2.text)
async def process_personal_data_1(message: types.Message, state: FSMContext):
    personal_data = message.text
    if personal_data == '–û—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è':
        await state.update_data(personal_data=personal_data)
        change_description(message.chat.id, "")
        await state.finish()
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb_start, resize_keyboard=True)
        await message.answer("‚ú®‚ú®‚ú® –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã ‚ú®‚ú®‚ú®", reply_markup=keyboard)
    elif len(personal_data) <= 1000 and personal_data != '–û—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è':
        await state.update_data(personal_data=personal_data)
        change_description(message.chat.id, personal_data)
        await state.finish()
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb_start, resize_keyboard=True)
        await message.answer("‚ú®‚ú®‚ú® –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã ‚ú®‚ú®‚ú®", reply_markup=keyboard)
    else:
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb_skip_about, resize_keyboard=True)
        msg = "–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç, –∫—Ä–∞—Ç–∫–æ—Å—Ç—å —Å–µ—Å—Ç–∞ —Ç–∞–ª–∞–Ω—Ç–∞!\n–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ –µ—â—ë —Ä–∞–∑."
        await message.answer(msg, reply_markup=keyboard)


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞
@dp.message_handler(Text(equals='üí§'))
async def main_page(message: types.Message):
    global flag
    await chk_profile(message)
    flag += 1
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb_main_page, resize_keyboard=True)
    msg = ("–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é. \n"
           "1. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã üöÄ\n"
           "2. –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å üèöÔ∏è\n"
           "3. –Ø –±–æ–ª—å—à–µ –Ω–µ —Ö–æ—á—É –Ω–∏–∫–æ–≥–æ –∏—Å–∫–∞—Ç—å ‚õî\n"
           "4. –£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É üóëÔ∏è")
    await message.answer(msg, reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–º–æ—Ä–æ–∑–∫–∏ –∞–Ω–∫–µ—Ç—ã
@dp.message_handler(Text(equals=['–Ø –±–æ–ª—å—à–µ –Ω–µ —Ö–æ—á—É –Ω–∏–∫–æ–≥–æ –∏—Å–∫–∞—Ç—å', '‚õî']))
async def off_profile(message: types.Message):
    await chk_profile(message)
    profile = User(message.from_user.id)
    user_activity(0, profile.user_id)
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb_change_activity, resize_keyboard=True)
    msg = "–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞. –ù–∞–¥–µ–µ–º—Å—è –≤—ã –Ω–∞—à–ª–∏ —Ç–æ, —á—Ç–æ –∏—Å–∫–∞–ª–∏!\n–ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å"
    await message.answer(msg, reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
@dp.message_handler(Text(equals=['–£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É', 'üóëÔ∏è']))
async def delete_user_profile(message: types.Message):
    await chk_profile(message)
    user_id = message.from_user.id
    delete_profile(message.from_user.id)
    # os.remove(f'images/{user_id}/{user_id}.jpg')
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb_registration, resize_keyboard=True)
    msg = "–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞üóë.\n–ù–∞–¥–µ–µ–º—Å—è –≤—ã –Ω–∞—à–ª–∏ —Ç–æ, —á—Ç–æ –∏—Å–∫–∞–ª–∏!\n–ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å."
    await message.answer(msg, reply_markup=keyboard)


async def chk_profile(message: types.Message):
    user_id = message.from_user.id
    user_data = get_user_by_id(user_id)
    if user_data is None:
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb_registration)
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è', reply_markup=keyboard)
    else:
        if message.text not in ['–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—åüèöÔ∏è', "–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã üöÄ", '–Ø –ø–∞—Ä–µ–Ω—å', "–Ø –¥–µ–≤—É—à–∫–∞", 'üí§', '‚ù§', "üëé",
                                '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', '1‚úèÔ∏è', '2üì∏', '3üìú', "4 üöÄ", 'üöÄ', '‚õî', 'üóëÔ∏è', '–û—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è',
                                '–≠—Ç–æ –≤—Å—ë, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ']:
            await message.answer('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ')


@dp.message_handler(content_types=types.ContentTypes.TEXT)
async def check_prf(message: types.message):
    await chk_profile(message)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
